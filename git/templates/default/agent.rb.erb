#!/usr/bin/env ruby
require 'ohai'
require 'net/http'
require 'json'

def send_splunk(status, short_message, host, facility)
  begin
    uri = URI.parse("<%= node['litc-chef-agent']['splunk_url'] %>")

	ENV['no_proxy'] = if ENV['no_proxy'].nil?
                        "#{uri.host}"
                      else
                        "#{ENV['no_proxy']},#{uri.host}"
                      end
    
    proxy = if ENV['http_proxy'].nil?
              ''
            else
              ENV['http_proxy'].gsub('http://', '')
            end
    proxy = URI.parse(proxy)
    http = Net::HTTP.new(uri.host, uri.port, proxy.host, proxy.port)
    http.use_ssl = true
    http.verify_mode = OpenSSL::SSL::VERIFY_NONE
    request = Net::HTTP::Post.new(uri.request_uri)
    request['Authorization'] = 'Splunk 794889C2-EAB3-4CF0-A3D5-6230B91B4C4E'
    request['Content-Type'] = 'application/json'

    request_body = {
        facility: facility,
        status: status,
        short_message: short_message,
        host: host,
    }.to_json

    body = {
      event: request_body,
      index: 's2400_devops_coe'
    }.to_json
    request.body = body
    http.request(request)
  rescue
    puts "Something went wrong with Splunk heartbeat !"
  end
end


# :nodoc:
module OS
  def self.windows?
    (/cygwin|mswin|mingw|bccwin|wince|emx/ =~ RUBY_PLATFORM) != nil
  end

  def self.mac?
    (/darwin/ =~ RUBY_PLATFORM) != nil
  end

  def self.unix?
    !OS.windows?
  end

  def self.linux?
    OS.unix? && !OS.mac?
  end
end

sleep rand(<%= node['litc-chef-agent']['random_delay']%>)

node = Ohai::System.new
node.all_plugins('hostname')

if OS.unix? || OS.linux?
  chef_path = '/etc/chef'
  install_path = '/opt/chef/bin'
elsif OS.mac?
  chef_path = '~/'
  install_path = '/opt/chef/bin'
elsif OS.windows?
  chef_path = 'c:/chef/'
  install_path = 'c:/opscode/chef/bin'
else
  raise 'can not define OS'
end

File.delete("#{chef_path}/chef-client.log") if File.exist?("#{chef_path}/chef-client.log")

unless system("#{install_path}/chef-client -c #{chef_path}/client.rb --logfile #{chef_path}/chef-client.log")
  file_content = File.readlines("#{chef_path}/chef-client.log")
  if (file_content.grep /Net::HTTPServerException: 401/).any? || (file_content.grep /ERROR: 401/).any?
    File.delete("#{chef_path}/client.pem") if File.exist?("#{chef_path}/client.pem")
    send_splunk('ERROR', 'HTTP Request Returned 401 Unauthorized', node['fqdn'], 'chef-client-agent')
  elsif (file_content.grep /FATAL: Net::HTTPServerException: 403/).any? || (file_content.grep /ERROR: 403/).any?
    send_splunk('ERROR', 'HTTP Request Returned 403 Forbidden', node['fqdn'], 'chef-client-agent')
  else
    send_splunk('ERROR', 'chef-client run failed', node['fqdn'], 'chef-client-agent')
  end
end
